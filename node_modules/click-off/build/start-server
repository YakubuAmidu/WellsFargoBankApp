#!/usr/bin/env node

'use strict';

var argv = require('yargs').argv;
var connectLiveReload = require('connect-livereload');
var express = require('express');
var httpProxy = require('http-proxy');
var fs = require('fs');
var livereload = require('tiny-lr');
var https = require('https');
var path = require('path');
var url = require('url');

if (argv.h) {
    console.log('Local Dev Server');
    console.log('');
    console.log('The local dev server starts an instance of an express webserver');
    console.log('that serves static assets out of a local folder and (optionally) proxies all');
    console.log('other requests to a backend server.  If the `--dir` argument is not specified');
    console.log('the current working directory is used.');
    console.log('');
    console.log('Usage:');
    console.log('    start-server [<options>] <www-directory>');
    console.log('');
    console.log('Options:');
    console.log('    --cert file\tA cert file (.crt) to use for HTTPS');
    console.log('    --key file\tA key file (.pem) to use for HTTPS');
    console.log('    --port num\tPort to start the webserver on');
    console.log('    --lr-port num\tPort to start the livereload server on');
    console.log('    --proxy url\tSend all non-static requests to this address');
    console.log('    --route cfg\tRespond to a dynamic route with a static file');
    console.log('               \teg: `start-server --route "/signup=./public/index.html"`');
    console.log('');
    console.log('Environment Args:');
    console.log('    Environment args will be used if available, but command line options');
    console.log('    will take priority.');
    console.log('');
    console.log('    IQ_SERVER_PROXY\tspecify which server to proxy to');
}

// you're weird, argv.
var port = argv.port || 80;
var lrport = argv.lrPort;

console.log('********************************************************************');
console.log('** Server:\t http://127.0.0.1:' + port);

if (lrport) {
    console.log('** Live-Reload:\t', lrport);
}
else {
    console.log('** Live-Reload:\t DISABLED');
}

// figure out proxy configuration
var proxy = null;
var targetParse = null;
var proxyConfig = null;
var proxyUrl = argv.proxy || process.env.IQ_SERVER_PROXY;

if (proxyUrl) {
    proxyConfig = {
        target: proxyUrl
    };

    targetParse = url.parse(proxyUrl);
    if (targetParse.protocol === 'https:') {
        proxyConfig.changeOrigin = targetParse.hostname;
        console.log('** Origin:\t', proxyConfig.changeOrigin);
    }

    console.log('** Proxying to:\t', proxyUrl);
    proxy = httpProxy.createProxyServer(proxyConfig)
        .on('error', function(errMsg) {
            // eat the error
        })
        .on('proxyRes', function(proxyRes) {
            // secure cookies are the devil locally
            var cookies = proxyRes.headers['set-cookie'];
            if (cookies) {
                proxyRes.headers['set-cookie'] = cookies.map(function(cookie) {
                    return cookie.replace(';Secure', '');
                });
            }

            // Rewrite redirects for browser CORS checks
            var location = proxyRes.headers.location;
            if (location) {
                proxyRes.headers.location = 'http://127.0.0.1:' + port;
            }
        });
}

// start the livereload server
if (lrport) {
    livereload().listen(lrport);
}

// set up the web server
var wwwroot = path.resolve(argv._[0] || '.');
console.log('** Serving:\t', wwwroot);

var app = express();
if (lrport) {
    app.use(connectLiveReload());
}
app.use(express.static(wwwroot));

// app.use(express.logger('dev'));

// custom routes
if (argv.route) {
    if (!Array.isArray(argv.route)) {
        argv.route = [argv.route];
    }

    argv.route.forEach(function(route) {
        var routeParts = route.split('=');
        app.get(new RegExp(routeParts[0], 'i'), function(req, res) {
            res.sendFile(routeParts[1]);
        });
    });
}

if (argv.proxy) {
    app.use(function(req, res) {
        proxy.web(req, res, proxyConfig);
    });
}

// extra options
if (argv.key && argv.cert) {
    console.log('** Using HTTPS');

    var secureOptions = {
        key: fs.readFileSync(argv.key),
        cert: fs.readFileSync(argv.cert)
    };

    console.log('    ...Private Key: ' + argv.key);
    console.log('    ...Certificate: ' + argv.cert);

    app = https.createServer(secureOptions, app);
}

console.log('********************************************************************');
app.listen(port, function() {
    console.log('READY');
});


