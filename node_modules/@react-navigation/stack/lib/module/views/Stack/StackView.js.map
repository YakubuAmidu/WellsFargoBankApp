{"version":3,"sources":["StackView.tsx"],"names":["React","View","Platform","StyleSheet","SafeAreaConsumer","GestureHandlerRootView","StackActions","CardStack","KeyboardManager","HeaderContainer","SafeAreaProviderCompat","GestureHandlerWrapper","isArrayEqual","a","b","length","every","it","index","StackView","Component","routes","previousRoutes","previousDescriptors","openingRouteKeys","closingRouteKeys","replacingRouteKeys","descriptors","route","descriptor","state","key","gestureEnabled","animationEnabled","options","undefined","OS","filter","r","includes","findIndex","props","render","setState","navigation","find","dispatch","pop","source","target","closing","emit","type","data","getDerivedStateFromProps","map","reduce","acc","slice","previousFocusedRoute","nextFocusedRoute","isAnimationEnabled","getAnimationTypeForReplace","animationTypeForReplace","splice","Error","keyboardHandlingEnabled","mode","rest","headerMode","styles","container","insets","getPreviousRoute","getGesturesEnabled","handleOpenRoute","handleCloseRoute","handleTransitionStart","handleTransitionEnd","renderHeader","renderScene","create","flex"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { View, Platform, StyleSheet } from 'react-native';\nimport { SafeAreaConsumer, EdgeInsets } from 'react-native-safe-area-context';\nimport { GestureHandlerRootView } from 'react-native-gesture-handler';\nimport {\n  StackActions,\n  StackNavigationState,\n  Route,\n} from '@react-navigation/native';\n\nimport CardStack from './CardStack';\nimport KeyboardManager from '../KeyboardManager';\nimport HeaderContainer, {\n  Props as HeaderContainerProps,\n} from '../Header/HeaderContainer';\nimport SafeAreaProviderCompat from '../SafeAreaProviderCompat';\nimport {\n  StackNavigationHelpers,\n  StackNavigationConfig,\n  StackDescriptorMap,\n} from '../../types';\n\ntype Props = StackNavigationConfig & {\n  state: StackNavigationState;\n  navigation: StackNavigationHelpers;\n  descriptors: StackDescriptorMap;\n};\n\ntype State = {\n  // Local copy of the routes which are actually rendered\n  routes: Route<string>[];\n  // Previous routes, to compare whether routes have changed or not\n  previousRoutes: Route<string>[];\n  // Previous descriptors, to compare whether descriptors have changed or not\n  previousDescriptors: StackDescriptorMap;\n  // List of routes being opened, we need to animate pushing of these new routes\n  openingRouteKeys: string[];\n  // List of routes being closed, we need to animate popping of these routes\n  closingRouteKeys: string[];\n  // List of routes being replaced, we need to keep a copy until the new route animates in\n  replacingRouteKeys: string[];\n  // Since the local routes can vary from the routes from props, we need to keep the descriptors for old routes\n  // Otherwise we won't be able to access the options for routes that were removed\n  descriptors: StackDescriptorMap;\n};\n\nconst GestureHandlerWrapper = GestureHandlerRootView ?? View;\n\n/**\n * Compare two arrays with primitive values as the content.\n * We need to make sure that both values and order match.\n */\nconst isArrayEqual = (a: any[], b: any[]) =>\n  a.length === b.length && a.every((it, index) => it === b[index]);\n\nexport default class StackView extends React.Component<Props, State> {\n  static getDerivedStateFromProps(\n    props: Readonly<Props>,\n    state: Readonly<State>\n  ) {\n    // If there was no change in routes, we don't need to compute anything\n    if (\n      (props.state.routes === state.previousRoutes ||\n        isArrayEqual(\n          props.state.routes.map((r) => r.key),\n          state.previousRoutes.map((r) => r.key)\n        )) &&\n      state.routes.length\n    ) {\n      let routes = state.routes;\n      let previousRoutes = state.previousRoutes;\n      let descriptors = props.descriptors;\n      let previousDescriptors = state.previousDescriptors;\n\n      if (props.descriptors !== state.previousDescriptors) {\n        descriptors = state.routes.reduce<StackDescriptorMap>((acc, route) => {\n          acc[route.key] =\n            props.descriptors[route.key] || state.descriptors[route.key];\n\n          return acc;\n        }, {});\n\n        previousDescriptors = props.descriptors;\n      }\n\n      if (props.state.routes !== state.previousRoutes) {\n        // if any route objects have changed, we should update them\n        const map = props.state.routes.reduce<Record<string, Route<string>>>(\n          (acc, route) => {\n            acc[route.key] = route;\n            return acc;\n          },\n          {}\n        );\n\n        routes = state.routes.map((route) => map[route.key] || route);\n        previousRoutes = props.state.routes;\n      }\n\n      return {\n        routes,\n        previousRoutes,\n        descriptors,\n        previousDescriptors,\n      };\n    }\n\n    // Here we determine which routes were added or removed to animate them\n    // We keep a copy of the route being removed in local state to be able to animate it\n\n    let routes =\n      props.state.index < props.state.routes.length - 1\n        ? // Remove any extra routes from the state\n          // The last visible route should be the focused route, i.e. at current index\n          props.state.routes.slice(0, props.state.index + 1)\n        : props.state.routes;\n\n    // Now we need to determine which routes were added and removed\n    let {\n      openingRouteKeys,\n      closingRouteKeys,\n      replacingRouteKeys,\n      previousRoutes,\n    } = state;\n\n    const previousFocusedRoute = previousRoutes[previousRoutes.length - 1] as\n      | Route<string>\n      | undefined;\n    const nextFocusedRoute = routes[routes.length - 1];\n\n    const isAnimationEnabled = (key: string) => {\n      const descriptor = props.descriptors[key] || state.descriptors[key];\n\n      return descriptor ? descriptor.options.animationEnabled !== false : true;\n    };\n\n    const getAnimationTypeForReplace = (key: string) => {\n      const descriptor = props.descriptors[key] || state.descriptors[key];\n\n      return descriptor.options.animationTypeForReplace ?? 'push';\n    };\n\n    if (\n      previousFocusedRoute &&\n      previousFocusedRoute.key !== nextFocusedRoute.key\n    ) {\n      // We only need to animate routes if the focused route changed\n      // Animating previous routes won't be visible coz the focused route is on top of everything\n\n      if (!previousRoutes.find((r) => r.key === nextFocusedRoute.key)) {\n        // A new route has come to the focus, we treat this as a push\n        // A replace can also trigger this, the animation should look like push\n\n        if (\n          isAnimationEnabled(nextFocusedRoute.key) &&\n          !openingRouteKeys.includes(nextFocusedRoute.key)\n        ) {\n          // In this case, we need to animate pushing the focused route\n          // We don't care about animating any other added routes because they won't be visible\n          openingRouteKeys = [...openingRouteKeys, nextFocusedRoute.key];\n\n          closingRouteKeys = closingRouteKeys.filter(\n            (key) => key !== nextFocusedRoute.key\n          );\n          replacingRouteKeys = replacingRouteKeys.filter(\n            (key) => key !== nextFocusedRoute.key\n          );\n\n          if (!routes.find((r) => r.key === previousFocusedRoute.key)) {\n            // The previous focused route isn't present in state, we treat this as a replace\n\n            openingRouteKeys = openingRouteKeys.filter(\n              (key) => key !== previousFocusedRoute.key\n            );\n\n            if (getAnimationTypeForReplace(nextFocusedRoute.key) === 'pop') {\n              closingRouteKeys = [\n                ...closingRouteKeys,\n                previousFocusedRoute.key,\n              ];\n\n              // By default, new routes have a push animation, so we add it to `openingRouteKeys` before\n              // But since user configured it to animate the old screen like a pop, we need to add this without animation\n              // So remove it from `openingRouteKeys` which will remove the animation\n              openingRouteKeys = openingRouteKeys.filter(\n                (key) => key !== nextFocusedRoute.key\n              );\n\n              // Keep the route being removed at the end to animate it out\n              routes = [...routes, previousFocusedRoute];\n            } else {\n              replacingRouteKeys = [\n                ...replacingRouteKeys,\n                previousFocusedRoute.key,\n              ];\n\n              closingRouteKeys = closingRouteKeys.filter(\n                (key) => key !== previousFocusedRoute.key\n              );\n\n              // Keep the old route in the state because it's visible under the new route, and removing it will feel abrupt\n              // We need to insert it just before the focused one (the route being pushed)\n              // After the push animation is completed, routes being replaced will be removed completely\n              routes = routes.slice();\n              routes.splice(routes.length - 1, 0, previousFocusedRoute);\n            }\n          }\n        }\n      } else if (!routes.find((r) => r.key === previousFocusedRoute.key)) {\n        // The previously focused route was removed, we treat this as a pop\n\n        if (\n          isAnimationEnabled(previousFocusedRoute.key) &&\n          !closingRouteKeys.includes(previousFocusedRoute.key)\n        ) {\n          closingRouteKeys = [...closingRouteKeys, previousFocusedRoute.key];\n\n          // Sometimes a route can be closed before the opening animation finishes\n          // So we also need to remove it from the opening list\n          openingRouteKeys = openingRouteKeys.filter(\n            (key) => key !== previousFocusedRoute.key\n          );\n          replacingRouteKeys = replacingRouteKeys.filter(\n            (key) => key !== previousFocusedRoute.key\n          );\n\n          // Keep a copy of route being removed in the state to be able to animate it\n          routes = [...routes, previousFocusedRoute];\n        }\n      } else {\n        // Looks like some routes were re-arranged and no focused routes were added/removed\n        // i.e. the currently focused route already existed and the previously focused route still exists\n        // We don't know how to animate this\n      }\n    } else if (replacingRouteKeys.length || closingRouteKeys.length) {\n      // Keep the routes we are closing or replacing if animation is enabled for them\n      routes = routes.slice();\n      routes.splice(\n        routes.length - 1,\n        0,\n        ...state.routes.filter(({ key }) =>\n          isAnimationEnabled(key)\n            ? replacingRouteKeys.includes(key) || closingRouteKeys.includes(key)\n            : false\n        )\n      );\n    }\n\n    if (!routes.length) {\n      throw new Error(\n        'There should always be at least one route in the navigation state.'\n      );\n    }\n\n    const descriptors = routes.reduce<StackDescriptorMap>((acc, route) => {\n      acc[route.key] =\n        props.descriptors[route.key] || state.descriptors[route.key];\n\n      return acc;\n    }, {});\n\n    return {\n      routes,\n      previousRoutes: props.state.routes,\n      previousDescriptors: props.descriptors,\n      openingRouteKeys,\n      closingRouteKeys,\n      replacingRouteKeys,\n      descriptors,\n    };\n  }\n\n  state: State = {\n    routes: [],\n    previousRoutes: [],\n    previousDescriptors: {},\n    openingRouteKeys: [],\n    closingRouteKeys: [],\n    replacingRouteKeys: [],\n    descriptors: {},\n  };\n\n  private getGesturesEnabled = ({ route }: { route: Route<string> }) => {\n    const descriptor = this.state.descriptors[route.key];\n\n    if (descriptor) {\n      const { gestureEnabled, animationEnabled } = descriptor.options;\n\n      if (animationEnabled === false) {\n        // When animation is disabled, also disable gestures\n        // The gesture to dismiss a route will look weird when not animated\n        return false;\n      }\n\n      return gestureEnabled !== undefined\n        ? gestureEnabled\n        : Platform.OS !== 'android';\n    }\n\n    return false;\n  };\n\n  private getPreviousRoute = ({ route }: { route: Route<string> }) => {\n    const { closingRouteKeys, replacingRouteKeys } = this.state;\n    const routes = this.state.routes.filter(\n      (r) =>\n        r.key === route.key ||\n        (!closingRouteKeys.includes(r.key) &&\n          !replacingRouteKeys.includes(r.key))\n    );\n\n    const index = routes.findIndex((r) => r.key === route.key);\n\n    return routes[index - 1];\n  };\n\n  private renderScene = ({ route }: { route: Route<string> }) => {\n    const descriptor =\n      this.state.descriptors[route.key] || this.props.descriptors[route.key];\n\n    if (!descriptor) {\n      return null;\n    }\n\n    return descriptor.render();\n  };\n\n  private renderHeader = (props: HeaderContainerProps) => {\n    return <HeaderContainer {...props} />;\n  };\n\n  private handleOpenRoute = ({ route }: { route: Route<string> }) => {\n    this.setState((state) => ({\n      routes: state.replacingRouteKeys.length\n        ? state.routes.filter((r) => !state.replacingRouteKeys.includes(r.key))\n        : state.routes,\n      openingRouteKeys: state.openingRouteKeys.filter(\n        (key) => key !== route.key\n      ),\n      closingRouteKeys: state.closingRouteKeys.filter(\n        (key) => key !== route.key\n      ),\n      replacingRouteKeys: [],\n    }));\n  };\n\n  private handleCloseRoute = ({ route }: { route: Route<string> }) => {\n    const { state, navigation } = this.props;\n\n    if (state.routes.find((r) => r.key === route.key)) {\n      // If a route exists in state, trigger a pop\n      // This will happen in when the route was closed from the card component\n      // e.g. When the close animation triggered from a gesture ends\n      navigation.dispatch({\n        ...StackActions.pop(),\n        source: route.key,\n        target: state.key,\n      });\n    } else {\n      // We need to clean up any state tracking the route and pop it immediately\n      this.setState((state) => ({\n        routes: state.routes.filter((r) => r.key !== route.key),\n        openingRouteKeys: state.openingRouteKeys.filter(\n          (key) => key !== route.key\n        ),\n        closingRouteKeys: state.closingRouteKeys.filter(\n          (key) => key !== route.key\n        ),\n      }));\n    }\n  };\n\n  private handleTransitionStart = (\n    { route }: { route: Route<string> },\n    closing: boolean\n  ) =>\n    this.props.navigation.emit({\n      type: 'transitionStart',\n      data: { closing },\n      target: route.key,\n    });\n\n  private handleTransitionEnd = (\n    { route }: { route: Route<string> },\n    closing: boolean\n  ) =>\n    this.props.navigation.emit({\n      type: 'transitionEnd',\n      data: { closing },\n      target: route.key,\n    });\n\n  render() {\n    const {\n      state,\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      navigation,\n      keyboardHandlingEnabled,\n      mode = 'card',\n      ...rest\n    } = this.props;\n\n    const {\n      routes,\n      descriptors,\n      openingRouteKeys,\n      closingRouteKeys,\n    } = this.state;\n\n    const headerMode =\n      mode !== 'modal' && Platform.OS === 'ios' ? 'float' : 'screen';\n\n    return (\n      <GestureHandlerWrapper style={styles.container}>\n        <SafeAreaProviderCompat>\n          <SafeAreaConsumer>\n            {(insets) => (\n              <KeyboardManager enabled={keyboardHandlingEnabled !== false}>\n                {(props) => (\n                  <CardStack\n                    mode={mode}\n                    insets={insets as EdgeInsets}\n                    getPreviousRoute={this.getPreviousRoute}\n                    getGesturesEnabled={this.getGesturesEnabled}\n                    routes={routes}\n                    openingRouteKeys={openingRouteKeys}\n                    closingRouteKeys={closingRouteKeys}\n                    onOpenRoute={this.handleOpenRoute}\n                    onCloseRoute={this.handleCloseRoute}\n                    onTransitionStart={this.handleTransitionStart}\n                    onTransitionEnd={this.handleTransitionEnd}\n                    renderHeader={this.renderHeader}\n                    renderScene={this.renderScene}\n                    headerMode={headerMode}\n                    state={state}\n                    descriptors={descriptors}\n                    {...rest}\n                    {...props}\n                  />\n                )}\n              </KeyboardManager>\n            )}\n          </SafeAreaConsumer>\n        </SafeAreaProviderCompat>\n      </GestureHandlerWrapper>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n});\n"]}